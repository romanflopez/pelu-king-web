{"version":3,"file":"ngx-trim-directive.js","sources":["ngx-trim-directive/ngx-trim.directive.ts","ngx-trim-directive/ngx-trim-directive.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NgControl,\n} from '@angular/forms';\n\n@Directive({\n  selector: 'input[trim],textarea[trim]',\n})\nexport class NgxTrimDirective implements OnInit, OnDestroy {\n\n  private _trim: '' | 'blur' | false;\n  @Input('trim')\n  public set trim (trimOption: '' | 'blur' | false) {\n    if (trimOption !== '' && trimOption !== 'blur' && trimOption !== false) {\n      console.warn(`Note: The value ${JSON.stringify(trimOption)} is not assignable to the trim attribute.\n        Only blank string (\"\"), \"blur\" or false is allowed.`);\n\n      this._trim = false;\n      return;\n    }\n\n    this._trim = trimOption;\n\n    const elem = this.elementRef.nativeElement;\n    const eleValue = elem.value;\n    if (trimOption !== false && eleValue !== eleValue.trim()) {\n      // initially trim the value if needed\n      NgxTrimDirective.dispatchEvent(elem, 'blur');\n    }\n  }\n\n  public get trim () {\n    return this._trim;\n  }\n\n  @Input() trimOnWriteValue = true;\n\n  private _valueAccessor: ControlValueAccessor;\n  private _writeValue: (value) => void;\n\n  constructor (\n    private elementRef: ElementRef,\n    @Optional() private ngControl: NgControl,\n  ) {\n  }\n\n  private static getCaret (el) {\n\n    return {\n      start: el.selectionStart,\n      end: el.selectionEnd,\n    };\n\n  }\n\n  private static setCaret (el, start, end) {\n\n    el.selectionStart = start;\n    el.selectionEnd = end;\n\n    el.focus();\n\n  }\n\n  private static dispatchEvent (el, eventType) {\n\n    const event = document.createEvent('Event');\n    event.initEvent(eventType, false, false);\n    el.dispatchEvent(event);\n\n  }\n\n  private static trimValue (el, value) {\n\n    el.value = value.trim();\n\n    NgxTrimDirective.dispatchEvent(el, 'input');\n\n  }\n\n  ngOnInit (): void {\n\n    if (!this.ngControl) {\n\n      console.warn('Note: The trim directive should be used with one of ngModel, formControl or formControlName directives.');\n\n      return;\n\n    }\n\n    this._valueAccessor = this.ngControl.valueAccessor;\n\n    this._writeValue = this._valueAccessor.writeValue;\n    this._valueAccessor.writeValue = (value) => {\n      const _value =\n        this.trim === false || !value || 'function' !== typeof value.trim || !this.trimOnWriteValue\n          ? value\n          : value.trim();\n\n      if (this._writeValue) {\n        this._writeValue.call(this._valueAccessor, _value);\n      }\n\n      if (value !== _value) {\n        if (this._valueAccessor['onChange']) {\n          this._valueAccessor['onChange'](_value);\n        }\n\n        if (this._valueAccessor['onTouched']) {\n          this._valueAccessor['onTouched']();\n        }\n      }\n\n    };\n\n  }\n\n  ngOnDestroy (): void {\n\n    if (this._valueAccessor && this._writeValue) {\n\n      this._valueAccessor.writeValue = this._writeValue;\n\n    }\n\n  }\n\n  @HostListener('blur', [\n    '$event.target',\n    '$event.target.value',\n  ])\n  onBlur (el: any, value: string): void {\n\n    if (this.trim === false) {\n\n      return;\n\n    }\n\n    if ((this.trim === '' || 'blur' === this.trim) && 'function' === typeof value.trim && value.trim() !== value) {\n\n      NgxTrimDirective.trimValue(el, value);\n      NgxTrimDirective.dispatchEvent(el, 'blur'); // in case updateOn is set to blur\n\n    }\n\n  }\n\n  @HostListener('input', [\n    '$event.target',\n    '$event.target.value',\n  ])\n  onInput (el: any, value: string): void {\n\n    if (this.trim === false) {\n\n      return;\n\n    }\n\n    if (this.trim === '' && 'function' === typeof value.trim && value.trim() !== value) {\n\n      let { start, end } = NgxTrimDirective.getCaret(el);\n\n      if (value[0] === ' ' && start === 1 && end === 1) {\n\n        start = 0;\n        end = 0;\n\n      }\n\n      NgxTrimDirective.trimValue(el, value);\n\n      NgxTrimDirective.setCaret(el, start, end);\n\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxTrimDirective } from './ngx-trim.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxTrimDirective],\n  exports: [NgxTrimDirective],\n})\nexport class NgxTrimDirectiveModule {\n}\n"]}