{"version":3,"file":"ngx-trim-directive.js","sources":["ng://ngx-trim-directive/ngx-trim.directive.ts","ng://ngx-trim-directive/ngx-trim-directive.module.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NgControl,\n} from '@angular/forms';\n\n@Directive({\n  selector: 'input[trim],textarea[trim]',\n})\nexport class NgxTrimDirective implements OnInit, OnDestroy {\n\n  private _trim: '' | 'blur' | false;\n  @Input('trim')\n  public set trim (trimOption: '' | 'blur' | false) {\n    if (trimOption !== '' && trimOption !== 'blur' && trimOption !== false) {\n      console.warn(`Note: The value ${JSON.stringify(trimOption)} is not assignable to the trim attribute.\n        Only blank string (\"\"), \"blur\" or false is allowed.`);\n\n      this._trim = false;\n      return;\n    }\n\n    this._trim = trimOption;\n\n    const elem = this.elementRef.nativeElement;\n    const eleValue = elem.value;\n    if (trimOption !== false && eleValue !== eleValue.trim()) {\n      // initially trim the value if needed\n      NgxTrimDirective.dispatchEvent(elem, 'blur');\n    }\n  }\n\n  public get trim () {\n    return this._trim;\n  }\n\n  @Input() trimOnWriteValue = true;\n\n  private _valueAccessor: ControlValueAccessor;\n  private _writeValue: (value) => void;\n\n  constructor (\n    private elementRef: ElementRef,\n    @Optional() private ngControl: NgControl,\n  ) {\n  }\n\n  private static getCaret (el) {\n\n    return {\n      start: el.selectionStart,\n      end: el.selectionEnd,\n    };\n\n  }\n\n  private static setCaret (el, start, end) {\n\n    el.selectionStart = start;\n    el.selectionEnd = end;\n\n    el.focus();\n\n  }\n\n  private static dispatchEvent (el, eventType) {\n\n    const event = document.createEvent('Event');\n    event.initEvent(eventType, false, false);\n    el.dispatchEvent(event);\n\n  }\n\n  private static trimValue (el, value) {\n\n    el.value = value.trim();\n\n    NgxTrimDirective.dispatchEvent(el, 'input');\n\n  }\n\n  ngOnInit (): void {\n\n    if (!this.ngControl) {\n\n      console.warn('Note: The trim directive should be used with one of ngModel, formControl or formControlName directives.');\n\n      return;\n\n    }\n\n    this._valueAccessor = this.ngControl.valueAccessor;\n\n    this._writeValue = this._valueAccessor.writeValue;\n    this._valueAccessor.writeValue = (value) => {\n      const _value =\n        this.trim === false || !value || 'function' !== typeof value.trim || !this.trimOnWriteValue\n          ? value\n          : value.trim();\n\n      if (this._writeValue) {\n        this._writeValue.call(this._valueAccessor, _value);\n      }\n\n      if (value !== _value) {\n        if (this._valueAccessor['onChange']) {\n          this._valueAccessor['onChange'](_value);\n        }\n\n        if (this._valueAccessor['onTouched']) {\n          this._valueAccessor['onTouched']();\n        }\n      }\n\n    };\n\n  }\n\n  ngOnDestroy (): void {\n\n    if (this._valueAccessor && this._writeValue) {\n\n      this._valueAccessor.writeValue = this._writeValue;\n\n    }\n\n  }\n\n  @HostListener('blur', [\n    '$event.target',\n    '$event.target.value',\n  ])\n  onBlur (el: any, value: string): void {\n\n    if (this.trim === false) {\n\n      return;\n\n    }\n\n    if ((this.trim === '' || 'blur' === this.trim) && 'function' === typeof value.trim && value.trim() !== value) {\n\n      NgxTrimDirective.trimValue(el, value);\n      NgxTrimDirective.dispatchEvent(el, 'blur'); // in case updateOn is set to blur\n\n    }\n\n  }\n\n  @HostListener('input', [\n    '$event.target',\n    '$event.target.value',\n  ])\n  onInput (el: any, value: string): void {\n\n    if (this.trim === false) {\n\n      return;\n\n    }\n\n    if (this.trim === '' && 'function' === typeof value.trim && value.trim() !== value) {\n\n      let { start, end } = NgxTrimDirective.getCaret(el);\n\n      if (value[0] === ' ' && start === 1 && end === 1) {\n\n        start = 0;\n        end = 0;\n\n      }\n\n      NgxTrimDirective.trimValue(el, value);\n\n      NgxTrimDirective.setCaret(el, start, end);\n\n    }\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxTrimDirective } from './ngx-trim.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxTrimDirective],\n  exports: [NgxTrimDirective],\n})\nexport class NgxTrimDirectiveModule {\n}\n"],"names":[],"mappings":"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"}