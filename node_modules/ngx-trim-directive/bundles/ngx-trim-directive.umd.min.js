!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/forms")):"function"==typeof define&&define.amd?define("ngx-trim-directive",["exports","@angular/core","@angular/forms"],e):e((t=t||self)["ngx-trim-directive"]={},t.ng.core,t.ng.forms)}(this,function(t,e,r){"use strict";var i=function(){function t(t,e){this.elementRef=t,this.ngControl=e,this.trimOnWriteValue=!0}return Object.defineProperty(t.prototype,"trim",{get:function(){return this._trim},set:function(e){if(""!==e&&"blur"!==e&&!1!==e)return console.warn("Note: The value "+JSON.stringify(e)+' is not assignable to the trim attribute.\n        Only blank string (""), "blur" or false is allowed.'),void(this._trim=!1);this._trim=e;var r=this.elementRef.nativeElement,i=r.value;!1!==e&&i!==i.trim()&&t.dispatchEvent(r,"blur")},enumerable:!0,configurable:!0}),t.getCaret=function(t){return{start:t.selectionStart,end:t.selectionEnd}},t.setCaret=function(t,e,r){t.selectionStart=e,t.selectionEnd=r,t.focus()},t.dispatchEvent=function(t,e){var r=document.createEvent("Event");r.initEvent(e,!1,!1),t.dispatchEvent(r)},t.trimValue=function(e,r){e.value=r.trim(),t.dispatchEvent(e,"input")},t.prototype.ngOnInit=function(){var t=this;this.ngControl?(this._valueAccessor=this.ngControl.valueAccessor,this._writeValue=this._valueAccessor.writeValue,this._valueAccessor.writeValue=function(e){var r=!1!==t.trim&&e&&"function"==typeof e.trim&&t.trimOnWriteValue?e.trim():e;t._writeValue&&t._writeValue.call(t._valueAccessor,r),e!==r&&(t._valueAccessor.onChange&&t._valueAccessor.onChange(r),t._valueAccessor.onTouched&&t._valueAccessor.onTouched())}):console.warn("Note: The trim directive should be used with one of ngModel, formControl or formControlName directives.")},t.prototype.ngOnDestroy=function(){this._valueAccessor&&this._writeValue&&(this._valueAccessor.writeValue=this._writeValue)},t.prototype.onBlur=function(e,r){!1!==this.trim&&(""!==this.trim&&"blur"!==this.trim||"function"!=typeof r.trim||r.trim()===r||(t.trimValue(e,r),t.dispatchEvent(e,"blur")))},t.prototype.onInput=function(e,r){if(!1!==this.trim&&""===this.trim&&"function"==typeof r.trim&&r.trim()!==r){var i=t.getCaret(e),n=i.start,o=i.end;" "===r[0]&&1===n&&1===o&&(n=0,o=0),t.trimValue(e,r),t.setCaret(e,n,o)}},t.decorators=[{type:e.Directive,args:[{selector:"input[trim],textarea[trim]"}]}],t.ctorParameters=function(){return[{type:e.ElementRef},{type:r.NgControl,decorators:[{type:e.Optional}]}]},t.propDecorators={trim:[{type:e.Input,args:["trim"]}],trimOnWriteValue:[{type:e.Input}],onBlur:[{type:e.HostListener,args:["blur",["$event.target","$event.target.value"]]}],onInput:[{type:e.HostListener,args:["input",["$event.target","$event.target.value"]]}]},t}(),n=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[],declarations:[i],exports:[i]}]}],t}();t.NgxTrimDirective=i,t.NgxTrimDirectiveModule=n,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-trim-directive.umd.min.js.map